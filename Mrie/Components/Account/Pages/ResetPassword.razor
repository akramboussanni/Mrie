@page "/Account/ResetPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Mrie.Data

@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Reset password</PageTitle>

<h1 align="center">Reset password</h1>

<div style="display: flex; justify-content: center; align-items: center; margin-top: 5px">
    <MudPaper Elevation="0" Style="width: 75%">
        <MudForm Model="@Input" Validation="true" class="w-100">
            <input type="hidden" name="Input.Code" value="@Input.Code" />

            <MudTextField @bind-Value="Input.Email" Label="Email" Immediate="true"
                          Class="form-control" autocomplete="username" aria-required="true" />
            <MudTextField @bind-Value="Input.Password" Label="Password" Immediate="true"
                          Class="form-control" autocomplete="new-password" aria-required="true" />
            <MudTextField @bind-Value="Input.ConfirmPassword" Label="Confirm Password" Immediate="true"
                          Class="form-control" autocomplete="new-password" aria-required="true" />

            <MudButton Type="Submit" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Check"
                       Class="w-100" Color="Color.Primary" @onclick="OnValidSubmitAsync">
                Reset
            </MudButton>
        </MudForm>
    </MudPaper>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? Code { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        if (Code is null)
        {
            RedirectManager.RedirectTo("Account/InvalidPasswordReset");
        }

        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            // Don't reveal that the user does not exist
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
        if (result.Succeeded)
        {
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        identityErrors = result.Errors;
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required] public string Code { get; set; } = "";
    }
}