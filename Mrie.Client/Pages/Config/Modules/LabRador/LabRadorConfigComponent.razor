@using System.Net
@using Mrie.Shared.Modals
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IDialogService DialogService

<MudStack Row="true" Class="mt-3">
    <MudNumericField Label="LabRador daily generation limit for each user" @bind-Value="Settings.LabRadorDailyLimit"/>
    <MudIconButton Color="Color.Primary" @onclick="OnSave" Icon="@Icons.Material.Filled.Save"/>
</MudStack>
<MudStack Row="true" Class="mt-3">
    <MudNumericField Label="LabRador input character limit" @bind-Value="Settings.LabRadorCharacterLimit"/>
    <MudIconButton Color="Color.Primary" @onclick="OnSave" Icon="@Icons.Material.Filled.Save"/>
</MudStack>
<MudStack Row="true" Class="mt-3">
    <MudNumericField Label="LabRador extra instructions character limit" @bind-Value="Settings.LabRadorInstructionCharacterLimit"/>
    <MudIconButton Color="Color.Primary" @onclick="OnSave" Icon="@Icons.Material.Filled.Save"/>
</MudStack>
<MudStack Row="true" Class="mt-6" Style="align-items: center">
    <MudTextField Lines="5" Variant="Variant.Outlined" Label="LabRador base instructions" @bind-Value="Settings.LabRadorInstructionBase"/>
    <div><MudIconButton Color="Color.Primary" @onclick="OnSave" Icon="@Icons.Material.Filled.Save"/></div>
</MudStack>
<MudStack Row="true" Class="mt-6" Style="align-items: center"> 
    <MudTextField Lines="5" Variant="Variant.Outlined" Label="LabRador instructions for Mistake Finder" @bind-Value="Settings.LabRadorErrorFinderInstruction"/>
    <div><MudIconButton Color="Color.Primary" @onclick="OnSave" Icon="@Icons.Material.Filled.Save"/></div>
</MudStack>
<MudStack Row="true" Class="mt-6" Style="align-items: center">
    <MudTextField Lines="5" Variant="Variant.Outlined" Label="LabRador instructions for Analyse Résultats" @bind-Value="Settings.LabRadorAnalyseResultatInstruction"/>
    <div><MudIconButton Color="Color.Primary" @onclick="OnSave" Icon="@Icons.Material.Filled.Save"/></div>
</MudStack>
<MudStack Row="true" Class="mt-6" Style="align-items: center">
    <MudTextField Lines="5" Variant="Variant.Outlined" Label="LabRador instructions for Analyse Démarches" @bind-Value="Settings.LabRadorAnalyseDemarcheInstruction"/>
    <div><MudIconButton Color="Color.Primary" @onclick="OnSave" Icon="@Icons.Material.Filled.Save"/></div>
</MudStack>
<MudStack Row="true" Class="mt-6" Style="align-items: center">
    <MudTextField Lines="5" Variant="Variant.Outlined" Label="LabRador instructions for Conclusion" @bind-Value="Settings.LabRadorConclusionInstruction"/>
    <div><MudIconButton Color="Color.Primary" @onclick="OnSave" Icon="@Icons.Material.Filled.Save"/></div>
</MudStack>
<MudStack Row="true" Class="mt-6" Style="align-items: center">
    <MudTextField Lines="5" Variant="Variant.Outlined" Label="LabRador instructions for Calculs" @bind-Value="Settings.LabRadorCalculsInstruction"/>
    <div><MudIconButton Color="Color.Primary" @onclick="OnSave" Icon="@Icons.Material.Filled.Save"/></div>
</MudStack>
<MudStack Row="true" Class="mt-6" Style="align-items: center">
    <MudTextField Label="Toggle user's LabRador Access" HelperText="User email" HelperTextOnFocus="true" @bind-Value="UserToAdd"/>
    <div><MudIconButton Color="Color.Primary" @onclick="AuthorizeUser" Icon="@Icons.Material.Filled.Add"/></div>
</MudStack>
<MudButton Variant="Variant.Filled" Class="mt-10" Color="Color.Primary" FullWidth="true" @onclick="ResetSettings">Reset Default Settings</MudButton>


@code
{
    public AppSettings Settings { get; set; } = new();
    public string UserToAdd { get; set; } = "example@contoso.com";

    public async Task AuthorizeUser()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"api/LabRador/authorize?email={UserToAdd}", string.Empty);
            response.EnsureSuccessStatusCode();
            string body = await response.Content.ReadAsStringAsync();
            bool result = bool.Parse(body);

            Snackbar.Add(result ? "Added user access successfully!" : "Removed user access successfully!", Severity.Success);
        }
        catch (HttpRequestException ex)
        {
            switch (ex.StatusCode)
            {
                case HttpStatusCode.Forbidden:
                    Snackbar.Add("You do not have permission to do this.", Severity.Error);
                    break;
                case HttpStatusCode.NotFound:
                    Snackbar.Add("Could not find any user with that email.", Severity.Error);
                    break;
                default:
                    Snackbar.Add("An unknown error occured.", Severity.Error);
                    break;
            }
        }
    }
    
    public async Task OnSave()
    {
        try
        {
            await Http.PostAsJsonAsync($"api/LabRador/changesettings",Settings);
            Snackbar.Add("Saved all settings successfully!", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add("An error occured when trying to save changes.", Severity.Error);
            throw;
        }
    }

    public async Task ResetSettings()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };
        var parameters = new DialogParameters<ConfirmationDialog> { {x => x.Endpoint, "api/LabRador/resetsettings"} };
        await (await DialogService.ShowAsync<ConfirmationDialog>("Confirm Reset", parameters, options)).Result;
        await OnInitializedAsync();
    }
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            Settings = await Http.GetFromJsonAsync<AppSettings>("api/LabRador/getsettings") ?? Settings;
        }
        catch (Exception ex)
        {
            // I have no clue why an error appears here. But it affects the functionality of the app.
            //Snackbar.Add(ex.ToString(), Severity.Error);
        }
    }
}