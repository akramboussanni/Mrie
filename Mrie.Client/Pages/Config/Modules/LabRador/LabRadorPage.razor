@page "/labrador"
@using Mrie.Shared.Modals.LabRador
@using Mrie.Shared.Permissions
@using Mrie.Client.Services;

@inject HttpClient Http
@inject IDialogService DialogService
@inject ISnackbar Snack
@inject NavigationManager Navigation
@inject MobileService Mobile

<MudText Align="Align.Center" Typo="Typo.h3">LabRador AI</MudText>
<MudText Align="Align.Center" Typo="Typo.body1">Smart, AI-powered tool to help with your lab reports.</MudText>
<MudStack Row="@(!Mobile.IsMobile)" Class="ma-2">
    <MudPaper Class="ma-4" Elevation="0" Height="100%">
        <MudText Typo="Typo.h6" Class="mt-3 mb-3">Options de génération:</MudText>
        <MudText Typo="Typo.body1" Class="mt-3 mb-1">Niveau de langue:</MudText>
        <MudToggleGroup Class="mt-2" T="LevelType" @bind-Value="Request.LanguageLevel" Color="Color.Secondary">
            <MudToggleItem Value="LevelType.Faible">Faible</MudToggleItem>
            <MudToggleItem Value="LevelType.Moyen">Moyen</MudToggleItem>
            <MudToggleItem Value="LevelType.Fort">Fort</MudToggleItem>
        </MudToggleGroup>

        <MudText Typo="Typo.body1" Class="mt-3 mb-1">Nombre de mots:</MudText>
        <MudToggleGroup Class="mt-2" T="LevelType" @bind-Value="Request.GenerationLength" Color="Color.Secondary">
            <MudToggleItem Value="LevelType.Faible">Court</MudToggleItem>
            <MudToggleItem Value="LevelType.Moyen">Moyen</MudToggleItem>
            <MudToggleItem Value="LevelType.Fort">Long</MudToggleItem>
        </MudToggleGroup>

        <MudText Typo="Typo.h6" Class="mt-10 mb-1">Quoi générer?</MudText>
        <MudSwitch Class="ma-1" Color="Color.Secondary" @bind-Value="Request.GenerateMistakeFinder" Label="Erreurs du rapport?"/>
        <MudSwitch Class="ma-1" Color="Color.Secondary" @bind-Value="Request.GenerateAnalyseResultats" Label="Analyse des résultats?"/>
        <MudSwitch Class="ma-1" Color="Color.Secondary" @bind-Value="Request.GenerateAnalyseDemarche" Label="Analyse des démarches?"/>
        <MudSwitch Class="ma-1" Color="Color.Secondary" @bind-Value="Request.GenerateConclusion" Label="Conclusion?"/>
        <MudSwitch Class="ma-1" Color="Color.Secondary" @bind-Value="Request.GenerateCalculs" Label="Calculs?" @bind-Value:after="ShowBeta" />
        <MudStack Row="true" Class="mt-10 mb-1" Style="align-items: center">
            <MudText Typo="Typo.h6">Graphiques</MudText>
            <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Secondary" @onclick="AddGraph"/>
        </MudStack>
        <MudList T="MudCard">
            @foreach (var graph in Request.Graphs)
            {
                <MudCard Class="pl-1 pr-1 mt-1" Elevation="0" Style="border: 0.8px solid #bdbdbd">
                    <MudCardContent>
                        <MudText Class="mt-2">Graphique @(Request.Graphs.IndexOf(graph) + 1)</MudText>
                        <MudTextField Class="mt-2" @bind-Value="graph.XAxis" Label="Axe des X" Immediate="true" HelperText="e.g. Temps en sec"/>
                        <MudTextField Class="mt-2" @bind-Value="graph.YAxis" Label="Axe des Y" Immediate="true" HelperText="e.g. Distance en m"/>
                        <MudTextField Class="mt-2" @bind-Value="graph.GraphType" Label="Allure du graphique" Immediate="true" HelperText="e.g. la distance augmente linéairement avec le temps."></MudTextField>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton OnClick="@(() => DeleteGraph(graph))" Variant="Variant.Text" Color="Color.Error">
                            Delete
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            }
        </MudList>
    </MudPaper>

    <MudDivider Vertical="true"/>

    <MudPaper Class="ma-4" Elevation="0" Height="100%" Width="100%">
        <div>
            <MudTextField Label="Mettre le rapport de laboratoire en entier ici." Immediate="true" Validation="@((string value) => MaxCharacters(value, CharacterLimit))" @bind-Value="Request.LabReport" Variant="Variant.Outlined" AutoGrow="true" Lines="20" Style="width: 100%; height: 100%" Required="true"/>
        </div>
        <div>
            <MudTextField Class="mt-4" Label="Instructions supplémentaires" HelperTextOnFocus="true" HelperText="Ces instructions vont être données au AI pour lui permettre de générer des résultats plus personalisés." Immediate="true" Validation="@((string value) => MaxCharacters(value, InstructionCharacterLimit))" @bind-Value="Request.ExtraInstructions" Variant="Variant.Outlined" AutoGrow="true" Lines="5" Style="width: 100%; height: 100%"/>
        </div>
        <MudButton @onclick="Generate" Color="Color.Primary" Variant="Variant.Filled" Class="mt-3" FullWidth="true">Generate</MudButton>
    </MudPaper>
</MudStack> 


@code {
    public LabRadorRequest Request = new();
    public int CharacterLimit = 25000;
    public int InstructionCharacterLimit = 1000;

    protected override async Task OnInitializedAsync()
    {
        await Mobile.EnsureInitializedAsync();
        Mobile.OnViewportChanged += StateHasChanged;
        var permitted = await Http.GetFromJsonAsync<bool>($"api/v2/permissions/{PermissionType.LabRador}");

        if (!permitted)
        {
            Navigation.NavigateTo("forbidden", forceLoad:true);
            return;
        }
        
        CharacterLimit = await Http.GetFromJsonAsync<int>("api/LabRador/charlimit");
        InstructionCharacterLimit = await Http.GetFromJsonAsync<int>("api/LabRador/instrcharlimit");
    }

    public void AddGraph()
    {
        Request.Graphs.Add(new()
        {
            XAxis = "",
            GraphType = "",
            YAxis = "",
        });
    }

    private IEnumerable<string> MaxCharacters(string? ch, int limit)
    {
        if (ch == null)
            yield break;

        if (ch.Length > limit)
            yield return $"Please respect the maximum of {limit} characters.";
    }

    public async Task ShowBeta()
    {
        if (!Request.GenerateCalculs)
            return;
        
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };
        var result = await (await DialogService.ShowAsync<BetaWarning>("Confirm Beta", options)).Result;
        Request.GenerateCalculs = !result.Canceled;
        StateHasChanged();
    }
    
    public void DeleteGraph(LabGraph graph)
    {
        Request.Graphs.Remove(graph);
    }

    public async Task Generate()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/labrador/generate", Request);
            response.EnsureSuccessStatusCode();
            Navigation.NavigateTo($"/labrador/result/{Uri.EscapeDataString(await response.Content.ReadAsStringAsync())}");
        }
        catch (HttpRequestException ex)
        {
            Snack.Add("An error occured when trying to generate Lab.", Severity.Error);
        }
    }
}