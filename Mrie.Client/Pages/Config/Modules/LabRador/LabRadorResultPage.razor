@page "/labrador/result/{Id}"
@using Microsoft.AspNetCore.SignalR.Client
@using Mrie.Shared.Modals.LabRador
@using Mrie.Shared.Modals.LabRador.Results
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ISnackbar Snack

<MudText Align="Align.Center" Typo="Typo.h3" Class="mb-4">LabRador AI</MudText>
@*@if (Result == null || Result.State == LabRadorState.Thinking)
{
    <MudText Align="Align.Center" Typo="Typo.body1" Class="mb-4">@Message</MudText>
    <MudProgressCircular Style="align-self: center"/>
}
else
{*@
    <MudTabs>
        <MudTabPanel Text="LabRador">
            <MudText Class="mt-4" Typo="Typo.h6">Partager</MudText>
            <MudText Class="mt-2">Il est possible de sauvegarder cette génération ou la partager à l'aide de ce lien:<br/> <a style="color: dodgerblue" href="@(Http.BaseAddress)labrador/result/@Id">@(Http.BaseAddress)labrador/result/@Id</a></MudText>
        </MudTabPanel>
        @if (Result.ErrorsFound != "")
        {
            <MudTabPanel Text="Erreurs Trouvées">
                <MudTextField Variant="Variant.Outlined" FullWidth="true" AutoGrow="true" @bind-Value="Result.ErrorsFound" ReadOnly="true"/>
            </MudTabPanel>
        }
        @if (Result.AnalyseResultat != "")
        {
            <MudTabPanel Text="Analyse des résultats">
                <MudTextField Variant="Variant.Outlined" FullWidth="true" AutoGrow="true" @bind-Value="Result.AnalyseResultat" ReadOnly="true"/>
            </MudTabPanel>
        }
        @if (Result.AnalyseDemarche != "")
        {
            <MudTabPanel Text="Analyse des démarches">
                <MudTextField Variant="Variant.Outlined" FullWidth="true" AutoGrow="true" @bind-Value="Result.AnalyseDemarche" ReadOnly="true"/>
            </MudTabPanel>
        }
        @if (Result.Conclusion != "")
        {
            <MudTabPanel Text="Conclusion">
                <MudTextField Variant="Variant.Outlined" FullWidth="true" AutoGrow="true" @bind-Value="Result.Conclusion" ReadOnly="true"/>
            </MudTabPanel>
        }
        @if (Result.Calculs != "")
        {
            <MudTabPanel Text="Calculs">
                <MudTextField Variant="Variant.Outlined" FullWidth="true" AutoGrow="true" @bind-Value="Result.Calculs" ReadOnly="true"/>
            </MudTabPanel>
        }
    </MudTabs>


@code {
    [Parameter] public string Id { get; set; }
    public string Message { get; set; } = "Waiting for response..";
    public LabRadorResult? Result = new();
    public HubConnection Connection;
    private string _acquiredLabRadorTextResult;

    protected override async Task OnInitializedAsync()
    {
        var generation = await Http.GetFromJsonAsync<LabRadorResponse>($"api/LabRador/generation?id={Id}");
        if (generation == null)
        {
            Message = "Found no LabRador response with that ID.";
            return;
        }
        
        _acquiredLabRadorTextResult = generation.Delta;
        Result = LabRadorResult.FromString(_acquiredLabRadorTextResult);
        if (Result == null)
        {
            Snack.Add("Returned null result.", Severity.Error);
            return;
        }
        
        Result.State = generation.State;
        if (Result.State != LabRadorState.Completed)
        {
            Connection = new HubConnectionBuilder()
                .WithUrl($"{Http.BaseAddress}labrador/hub")
                .Build();

            await Connection.StartAsync();
            await Connection.InvokeAsync("SubscribeUpdates", Id);
            Connection.On<LabRadorResponse>("ReceiveResponsePart", HandleLabRadorResponse);
        }
    }

    private void HandleLabRadorResponse(LabRadorResponse stream)
    {
        _acquiredLabRadorTextResult += stream.Delta;
        Result = LabRadorResult.FromString(_acquiredLabRadorTextResult);
        if (Result == null)
        {
            Navigation.NavigateTo("labrador/cheekybastard");
            return;
        }
        Result.State = stream.State;
        StateHasChanged();
    }
}