@using System.Text.RegularExpressions
@using Mrie.Shared.Modals
@using Mrie.Shared.Permissions
@using Mrie.Client.Pages.Config.Modules.Dialogs
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject HttpClient Http
@inject IDialogService DialogService

<MudText Class="pa-2 ma-2">Create New Access Token | Marame please dont touch this :)</MudText>
<MudCard Class="pa-2 ma-2">
    <MudCardContent>
        <MudTextField @bind-Value="NewToken.Name" Label="Name" Immediate="true" />
        <MudTextField @bind-Value="NewToken.Description" Label="Description" Variant="@Variant.Outlined" Immediate="true" Lines="3" />
        <MudSelect @bind-SelectedValues="NewToken.Permissions" Class="mt-4" T="PermissionType" MultiSelection="true" Label="Permissions to grant/revoke">
            @foreach (PermissionType perm in Enum.GetValues(typeof(PermissionType)))
            {
                @if (perm != PermissionType.None)
                {
                    <MudSelectItem T="PermissionType" Value="perm">@perm</MudSelectItem>
                }
            }
        </MudSelect>
        <MudDatePicker Label="Expiration date" @bind-Date="NewToken.Expiration" />
    </MudCardContent>
    <MudCardActions>
        <MudButton OnClick="@AddToken" Variant="Variant.Filled" Color="Color.Primary">
            Create
        </MudButton>
    </MudCardActions>
</MudCard>
<MudDivider/>

<MudText Class="pa-2 mt-2">Existing Tokens</MudText>

<MudList T="MudCard">
    @foreach (var token in Tokens)
    {
        <MudCard Class="pa-2 ma-2">
            <MudCardContent>
                <MudTextField @bind-Value="token.Name" Label="Name"/>
                <MudTextField @bind-Value="token.Description" Label="Description"/>
                <MudSwitch @bind-Value="token.IsActive" Label="Enabled?"></MudSwitch>
                <MudText><b>Expires on</b>: @token.Expiration.ToString()</MudText>
                <MudText><b>Permissions</b>: @string.Join(", ", token.Permissions)</MudText>
            </MudCardContent>
            <MudCardActions>
                <MudButton Class="mr-2" OnClick="@(() => SaveChanges(token))" Variant="Variant.Filled" Color="Color.Primary">
                    Save Changes
                </MudButton>
                <MudButton OnClick="@(() => DeleteToken(token.Id))" Variant="Variant.Text" Color="Color.Error">
                    Delete
                </MudButton>
            </MudCardActions>
        </MudCard>
    }
</MudList>

@code
{
    private AccessToken NewToken { get; set; } = CreateDefault();
    private IEnumerable<AccessToken> Tokens { get; set; } = new List<AccessToken>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var data = await Http.GetFromJsonAsync<List<AccessToken>>("api/v2/tokens");
            Tokens = data ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            Snackbar.Add(ex.ToString(), Severity.Error);
        }
    }

    private static AccessToken CreateDefault()
        => new() { Name = "New Access Token", Description = "This token does things.", Permissions = new List<PermissionType>(), Expiration = DateTime.Now.AddDays(30), IsActive=true };

    private async Task AddToken()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/v2/tokens", NewToken);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<CreateResponseData<AccessToken, string>>();

                var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };
                var parameters = new DialogParameters<ShowTokenDialog> { {x => x.Token, result.Data } };

                await (await DialogService.ShowAsync<ShowTokenDialog>("", parameters, options)).Result;
                await OnInitializedAsync();

                Snackbar.Add("Successfully created new token.", Severity.Success);
                return;
            }

            Snackbar.Add("Error occured when trying to create token.", Severity.Error);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }

        NewToken = CreateDefault();
    }

    private async Task<bool> SaveChanges(AccessToken token)
    {
        try
        {
            var response = await Http.PatchAsJsonAsync($"api/v2/tokens/{Uri.EscapeDataString(token.Id)}", token);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Successfully saved changes.", Severity.Success);
                return true;
            }

            Snackbar.Add("Error occured when trying to save changes.", Severity.Error);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }

        return false;
    }

    private async Task DeleteToken(string tokenId)
    {
        try
        {
            var response = await Http.DeleteAsync($"api/v2/tokens/{Uri.EscapeDataString(tokenId)}");

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Deleted access token successfully.", Severity.Success);
                Tokens = Tokens.Where(val => val.Id != tokenId).ToList();
            }
            else
            {
                Snackbar.Add($"Failed to delete access token.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            Snackbar.Add(ex.ToString(), Severity.Error);
        }
    }
}