@using System.Net
@using Mrie.Shared.Modals.Signups
@inject HttpClient Http
@inject IDialogService DialogService
@inject ISnackbar Snack

<MudButton Class="ma-4" @onclick="(() => ShowModify(NewSignup.Id))" Variant="Variant.Filled" Color="Color.Primary">Create New Signup</MudButton>

<MudDivider Class="mt-2"/>
<MudText Class="ma-4">Existing Signups</MudText>
<MudList T="MudCard">
    @foreach (var signup in Signups)
    {
        <MudCard Class="ma-4">
            <MudCardContent>
                <MudText Typo="Typo.h5">@signup.DisplayName (@signup.Id)</MudText>
                <MudText Typo="Typo.body1">@(signup.RequireAuth ? "Private visibility" : "Public visibility")</MudText>
            </MudCardContent>
            <MudCardActions>
                <MudButton @onclick="() => ShowModify(signup.Id)" Variant="Variant.Filled" Color="Color.Primary">Edit</MudButton>
                <MudButton @onclick="() => DeleteConfirmation(signup.Id)" Variant="Variant.Text" Color="Color.Error">Delete</MudButton>
            </MudCardActions>
        </MudCard>
    }
</MudList>

@code
{
    private SignupObject NewSignup { get; set; } = new()
        { Id = "TEMPORARY" };
    private List<SignupObject> Signups { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        await FetchSignupsAsync();
    }

    public async Task FetchSignupsAsync()
        => Signups = await Http.GetFromJsonAsync<List<SignupObject>>("api/Signups/signups") ?? [];
    
    public async Task DeleteConfirmation(string objId)
    {
        var parameters = new DialogParameters<DeleteSignupDialog>
        {
            { x => x.SignupId, objId },
        };
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small };
        var dialog = await DialogService.ShowAsync<DeleteSignupDialog>("Delete Signup", parameters, options);
        var result = await dialog.Result;
        if (result is not null)
        {
            if (!result.Canceled)
                Signups.Remove(Signups.First(x => x.Id == objId));

            await FetchSignupsAsync();
        }
    }
    
    public async Task ShowModify(string objId)
    {
        var parameters = new DialogParameters<ModifySignupDialog>
        {
            { x => x.SignupId, objId },
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large };
        var dialog = await DialogService.ShowAsync<ModifySignupDialog>("Edit Signup", parameters, options);
        var result = await dialog.Result;
        if (result is not null)
        {
            await FetchSignupsAsync();
        }
    }
}