@using Mrie.Shared.Modals
@using Mrie.Shared.Modals.Signups
@inject HttpClient Http
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        Modify Signup
    </TitleContent>
    <DialogContent>
        <MudTextField Class="ml-2" @bind-Value="NewSignup.Id" Disabled="true" Label="ID"/>
        <MudTextField Class="ml-2" @bind-Value="NewSignup.DisplayName" Label="Display Name"></MudTextField>
        <MudDivider/>
        
        <MudStack Row="true" Class="ml-2 mt-4">
            <MudText Typo="Typo.h6">Authorized Users</MudText>
            <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Success" @onclick="CreateAuthorizedUser"/>
        </MudStack>
        @foreach (var id in NewSignup.AuthorizedUsers)
        {
            var mail = Http.GetFromJsonAsync<string>($"api/v2/permissions/{Uri.EscapeDataString(id)}").Result;
            <MudStack Row="true" Class="ma-4">
                <MudDivider/>
                <MudTextField ReadOnly="true" @bind-Value="@mail"/>
                <MudIconButton @onclick="() => UnauthorizeUser(id)" Icon="@Icons.Material.Filled.Delete" Color="Color.Error"></MudIconButton>
            </MudStack>
        }

        <MudStack Class="mt-4 ml-2" Row="true">
            <MudText Typo="Typo.h6">Signup Categories</MudText>
            <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Success" @onclick="CreateCategory"/>
        </MudStack>
        @foreach (var category in NewSignup.Categories)
        {
            <MudStack Class="mt-4 ml-2">
                <MudDivider/>
                <MudTextField Typo="Typo.subtitle1" @bind-Value="category.CategoryName" Label="Category Name"/>
                <MudTextField @bind-Value="category.Limit" Label="Limit"/>
                <MudSwitch @bind-Value="category.Readonly" Label="Readonly"/>

                <MudStack Row="true" Class="mt-2">
                    <MudText Class="mt-2">Participants</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Success" @onclick="() => CreateParticipant(category)"/>
                </MudStack>

                <MudList T="MudStack">
                    @foreach (var participant in category.Participants)
                    {
                        <MudStack Row="true">
                            <MudTextField @bind-Value="participant.Person.Name"></MudTextField>
                            <MudTextField @bind-Value="participant.Person.Contact"></MudTextField>
                            <MudIconButton
                                @onclick="() => RemoveParticipant(category, participant)"
                                Icon="@Icons.Material.Filled.Delete"
                                Color="Color.Error">
                            </MudIconButton>
                        </MudStack>
                    }
                </MudList>
            </MudStack>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton OnClick="Confirm" Variant="Variant.Filled" Color="Color.Success">Edit</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] public IMudDialogInstance MudDialog { get; set; }
    [Parameter] public string SignupId { get; set; } = "TEMPORARY";
    public SignupObject Signup { get; set; } = SignupObject.CreateDefault();
    public SignupObject NewSignup { get; set; } = SignupObject.CreateDefault();

    protected override async Task OnInitializedAsync()
    {
        if (SignupId == "TEMPORARY")
        {
            Signup = new()
            {
                Id = Guid.NewGuid().ToString(),
                DisplayName = "My New Signup",
                Categories = [],
                AuthorizedUsers = []
            };
        }
        else
        {
            Signup = await Http.GetFromJsonAsync<SignupObject>($"api/Signups/signup?id={Uri.EscapeDataString(SignupId)}");
        }
        NewSignup = Signup ?? SignupObject.CreateDefault();
    }

    public void Cancel()
        => MudDialog.Cancel();

    public async Task Confirm()
    {
        var result = await Http.PostAsJsonAsync<object>("api/Signups/modifysignup", NewSignup);
        Snackbar.Add("Signup Edited", Severity.Success);
        MudDialog.Close();
    }

    public void UnauthorizeUser(string id)
    {
        NewSignup.AuthorizedUsers.Remove(id);
    }
    
    public void RemoveParticipant(SignupCategory category, CategoryParticipant participant)
    {
        category.Participants.Remove(category.Participants.First(x => x.PersonId==participant.PersonId));
    }

    public void CreateCategory()
    {
        SignupCategory category = new()
        {
            Id = Guid.NewGuid().ToString(),
            Participants = [],
            Limit = 100,
            CategoryName = "New Category",
            Readonly = false
        };
        Signup.Categories.Add(category);
    }
    public void CreateParticipant(SignupCategory category)
    {
        var personId = Guid.NewGuid().ToString();
        category.Participants.Add(new CategoryParticipant {PersonId=personId,Person = new Person {Id=personId,Contact = "hi@mail.com", Name = "New Participant"},Category = category, SignupCategoryId = category.Id});
    }

    public void CreateAuthorizedUser()
    {
        Snackbar.Add("Functionality not yet implemented.", Severity.Warning);
    }
}