@using System.Net
@using System.Text.RegularExpressions
@using Mrie.Shared.Modals
@using Mrie.Shared.Permissions
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject HttpClient Http

<MudText Class="mt-2">Give Permission</MudText>
<MudStack Row="true" Class="mt-6" Style="align-items: center">
    <MudTextField Label="User Permission" HelperText="User email" HelperTextOnFocus="true" @bind-Value="UserToAdd"/>
    <div><MudIconButton Color="Color.Primary" @onclick="@(() => AuthorizeUser(false))" Icon="@Icons.Material.Filled.Add"/></div>
    <div><MudIconButton Color="Color.Primary" @onclick="@(() => AuthorizeUser(true))" Icon="@Icons.Material.Filled.Remove"/></div>
</MudStack>
<MudSelect @bind-SelectedValues="Permissions" Class="mt-4" T="PermissionType" MultiSelection="true" Label="Permissions to grant/revoke">
    @foreach (PermissionType perm in Enum.GetValues(typeof(PermissionType)))
    {
        @if (perm != PermissionType.None)
        {
            <MudSelectItem T="PermissionType" Value="perm">@perm</MudSelectItem>
        }
    }
</MudSelect>

<MudDivider Class="mt-12"></MudDivider>
<MudText Class="mt-12">Create New User</MudText>
<MudStack Row="true" Class="mt-6" Style="align-items: center">
    <MudTextField Label="Email" @bind-Value="CreationPayload.Email"/>
    <MudTextField @bind-Value="CreationPayload.Password"
                Label="Password"
                Immediate="true"
                For="@(() => CreationPayload.Password)"
                Error="@_hasError"
                ErrorText="@_errorText"
                OnBlur="@ValidatePassword" />
    <div><MudIconButton Color="Color.Primary" @onclick="CreateUser" Icon="@Icons.Material.Filled.Add"/></div>
</MudStack>

@code
{
    public string UserToAdd { get; set; } = "example@contoso.com";
    public AccountCreationPayload CreationPayload {get;set;} = new() {Email="example@contoso.com", Password="SuperSecret123!"};
    public IEnumerable<PermissionType> Permissions { get; set; } = new List<PermissionType>();

    public async Task AuthorizeUser(bool substract)
    {
        try
        {
            PermissionType combined = Permissions.Aggregate(PermissionType.None, (acc, f) => acc | f);
            AuthorizationRequest auth = new()
                    { Email = UserToAdd, Permissions = combined, Substract = substract };
            var response = await Http.PatchAsJsonAsync($"api/v2/permissions", auth);
            response.EnsureSuccessStatusCode();
            Snackbar.Add(substract ? "Removed user access successfully!" : "Added user access successfully!", Severity.Success);
        }
        catch (HttpRequestException ex)
        {
            switch (ex.StatusCode)
            {
                case HttpStatusCode.Forbidden:
                    Snackbar.Add("You do not have permission to do this.", Severity.Error);
                    break;
                case HttpStatusCode.NotFound:
                    Snackbar.Add("Could not find any user with that email.", Severity.Error);
                    break;
                default:
                    Snackbar.Add("An unknown error occured.", Severity.Error);
                    break;
            }
        }
    }
    public async Task CreateUser()
    {
        try
        {
            var response = await Http.PostAsJsonAsync($"api/v2/users", CreationPayload);
            response.EnsureSuccessStatusCode();
            Snackbar.Add("Created user successfully!", Severity.Success);
        }
        catch (HttpRequestException ex)
        {
            switch (ex.StatusCode)
            {
                case HttpStatusCode.Forbidden:
                    Snackbar.Add("You do not have permission to do this.", Severity.Error);
                    break;
                case HttpStatusCode.Conflict:
                    Snackbar.Add("User with that email already exists.", Severity.Error);
                    break;
                default:
                    Snackbar.Add($"An unknown error occured: {ex.Message}", Severity.Error);
                    break;
            }
        }
    }

}

@code {
    private bool _hasError;
    private string _errorText;

    private void ValidatePassword()
    {
        _hasError = false;
        _errorText = string.Empty;

        if (string.IsNullOrWhiteSpace(CreationPayload.Password) || CreationPayload.Password.Length < 6)
        {
            SetError("Password must be at least 6 characters.");
        }
        else if (!Regex.IsMatch(CreationPayload.Password, @"[A-Z]"))
        {
            SetError("Password must contain at least one uppercase letter.");
        }
        else if (!Regex.IsMatch(CreationPayload.Password, @"[a-z]"))
        {
            SetError("Password must contain at least one lowercase letter.");
        }
        else if (!Regex.IsMatch(CreationPayload.Password, @"[\W_]"))
        {
            SetError("Password must contain at least one special character.");
        }
    }

    private void SetError(string message)
    {
        _hasError = true;
        _errorText = message;
    }
}