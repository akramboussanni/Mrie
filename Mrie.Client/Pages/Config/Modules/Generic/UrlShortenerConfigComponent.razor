@using System.Text.RegularExpressions
@using Mrie.Shared.Modals
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject HttpClient Http

<MudText Class="pa-2 ma-2">Create New Url</MudText>
<MudCard Class="pa-2 ma-2">
    <MudCardContent>
        <MudTextField @bind-Value="NewUrl.Name" Label="@(Http.BaseAddress+NewUrl.Name)" Immediate="true" Validation="@((string n) => ValidateName(n))"/>
        <MudTextField @bind-Value="NewUrl.RedirectUrl" Label="will redirect to..."/>
    </MudCardContent>
    <MudCardActions>
        <MudButton OnClick="@AddUrl" Variant="Variant.Filled" Color="Color.Primary">
            Create
        </MudButton>
    </MudCardActions>
</MudCard>
<MudDivider/>

<MudText Class="pa-2 mt-2">Modify Existing URLs</MudText>

<MudList T="MudCard">
    @foreach (var url in TinyUrls)
    {
        <MudCard Class="pa-2 ma-2">
            <MudCardContent>
                <MudTextField @bind-Value="url.Name" Label="@(Http.BaseAddress+url.Name)" Immediate="true" Validation="@((string n) => ValidateName(n))"/>
                <MudTextField @bind-Value="url.RedirectUrl" Label="will redirect to..."/>
            </MudCardContent>
            <MudCardActions>
                <MudButton Class="mr-2" OnClick="@(() => SaveChanges(url))" Variant="Variant.Filled" Color="Color.Primary">
                    Save Changes
                </MudButton>
                <MudButton OnClick="@(() => DeleteUrl(url.Id))" Variant="Variant.Text" Color="Color.Error">
                    Delete
                </MudButton>
            </MudCardActions>
        </MudCard>
    }
</MudList>

@code
{
    private UrlShortenerObject NewUrl { get; set; } = CreateDefault();
    private List<UrlShortenerObject> TinyUrls { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var data = await Http.GetFromJsonAsync<List<UrlShortenerObject>>("api/v2/urlshorteners");
            TinyUrls = data ?? [];
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            Snackbar.Add(ex.ToString(), Severity.Error);
        }
    }

    private static UrlShortenerObject CreateDefault()
        => new() { Name = "myshortener", RedirectUrl = "https://google.com/", Id = "temp"};
    
    private async Task AddUrl()
    {
        if (await SaveChanges(NewUrl, true))
        {
            await OnInitializedAsync();
            StateHasChanged();
        }
        
        NewUrl = CreateDefault();
    }

    private async Task<bool> SaveChanges(UrlShortenerObject url, bool isNew = false)
    {
        try
        {
            HttpResponseMessage response;

            if (isNew)
                response = await Http.PostAsJsonAsync($"api/v2/urlshorteners", url);
            else
                response = await Http.PatchAsJsonAsync($"api/v2/urlshorteners/{Uri.EscapeDataString(url.Id)}", url);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Successfully saved changes.", Severity.Success);
                return true;
            }

            Snackbar.Add("Error occured when trying to save changes.", Severity.Error);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }

        return false;
    }

    private string? ValidateName(string name)
    {
        if (string.IsNullOrWhiteSpace(name))
            return "Name is required.";

        return !Regex.IsMatch(name, @"^[a-zA-Z0-9_-]+$") ? "Only letters, numbers, hyphens (-) and underscores (_) are allowed." : null;
    }
    
    private async Task DeleteUrl(string urlId)
    {
        try
        {

            var response = await Http.DeleteAsync($"api/v2/urlshorteners/{Uri.EscapeDataString(urlId)}");

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Deleted shortener successfully.", Severity.Success);
                TinyUrls = TinyUrls.Where(val => val.Id != urlId).ToList();
            }
            else
            {
                Snackbar.Add($"Failed to delete URL shortener.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            Snackbar.Add(ex.ToString(), Severity.Error);
        }
    }
}