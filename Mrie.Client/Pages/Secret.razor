@using System.Net
@using Mrie.Shared.Modals
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IDialogService DialogService
@page "/supersecret"

<MudText Typo="@Typo.h3">Wow! You've found a secret... well done!</MudText>
<MudStack Row="true" Class="mt-3">
    <MudTextField Label="Access Token" @bind-Value="AccessToken"/>
    <MudIconButton Color="Color.Primary" @onclick="OnSave" Icon="@Icons.Material.Filled.Save"/>
</MudStack>
<MudStack Row="true" Class="mt-3">
    <MudButton Variant="Variant.Filled" Class="mt-10" Color="Color.Primary" FullWidth="true" @onclick="ResetSettings">Remove Token</MudButton>
</MudStack>
<MudButton Variant="Variant.Filled" Class="mt-6" Color="Color.Primary" FullWidth="true" @onclick="Test">Token Tester</MudButton>


@code
{
    public string AccessToken { get; set; }
    private bool _isTokenPresent;
    protected override void OnInitialized()
    {
        _isTokenPresent = Http.DefaultRequestHeaders.Contains("X-Mrie-Token");
    }
    
    public async Task OnSave()
    {
        try
        {
            Http.DefaultRequestHeaders.Add("X-Mrie-Token", AccessToken);
            Snackbar.Add("Saved all settings successfully!", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add("An error occured when trying to save changes.", Severity.Error);
            throw;
        }
    }

    public async Task ResetSettings()
    {
        Http.DefaultRequestHeaders.Remove("X-Mrie-Token");
    }

    public async Task Test()
    {
        if (!Http.DefaultRequestHeaders.Contains("X-Mrie-Token"))
        {
            await DialogService.ShowMessageBox("Test", "No token is present in header.");
            return;
        }
        var values = Http.DefaultRequestHeaders.GetValues("X-Mrie-Token");
        await DialogService.ShowMessageBox("Test", values.First().ToString());
    }
}