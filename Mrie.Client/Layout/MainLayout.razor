@using Mrie.Shared.Permissions
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject MobileService Mobile

<MudThemeProvider Theme="Theme"/>
<MudPopoverProvider/>
<MudDialogProvider
    FullWidth="true"
    CloseButton="true"/>
<MudSnackbarProvider/>
<MudLayout>
    <MudAppBar Elevation="0" Dense="@(Mobile.IsMobile)" Contextual="true">
            <MudStaticNavDrawerToggle DrawerId="nav-drawer" Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"/>
        <MudButton Href="/">Mrie</MudButton>
        @if (!Mobile.IsMobile)
        {
            <AuthorizeView>
                <Authorized>
                    <MudButton Href="Account/Manage" FullWidth="false" StartIcon="@Icons.Material.Filled.Person">@context.User.Identity?.Name</MudButton>
                    <MudSpacer/>
                    @if (HasConfigPermission)
                    {
                        <MudButton Class="lowercase-button" Href="config" StartIcon="@Icons.Material.Filled.Settings">Config</MudButton>
                    }
                    <MudButton Color="Color.Secondary" Class="mr-2 ml-4" Href="labrador" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Pets">LabRador AI</MudButton>
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken/>
                        <input type="hidden" name="ReturnUrl" value="@_currentUrl"/>
                        <button type="submit" class="mud-nav-link mud-ripple">
                            <MudIcon Icon="@Icons.Material.Filled.Logout" Class="mr-3"/> LOGOUT
                        </button>
                    </form>
                </Authorized>
                <NotAuthorized>
                    <MudSpacer/>
                    <MudButton Class="lowercase-button" Href="labrador" Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Pets">LabRador AI</MudButton>
                    <MudButton Href="Account/Register" StartIcon="@Icons.Material.Filled.Person">Register</MudButton>
                    <MudButton Href="Account/Login" StartIcon="@Icons.Material.Filled.Key">Log in</MudButton>
                </NotAuthorized>
            </AuthorizeView>
        }
        @*
    <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End"/>
    *@
    </MudAppBar>
    <MudDrawer id="nav-drawer" @bind-Open="DrawerOpen" Variant="@(DrawerVariant.Responsive)" ClipMode="@(DrawerClipMode.Always)" Elevation="@(Mobile.IsMobile ? 2 : 0)">
        <NavMenu/>
    </MudDrawer>

    <MudMainContent Class="pt-20 pa-12">
        @Body
    </MudMainContent>
</MudLayout>


<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    public bool DrawerOpen = false;
    public bool HasConfigPermission = false;

    protected override async Task OnInitializedAsync()
    {
        await Mobile.EnsureInitializedAsync();
        Mobile.OnViewportChanged += StateHasChanged;
        HasConfigPermission = await Http.GetFromJsonAsync<bool>($"api/v2/permissions/{PermissionType.ManageApps}");
    }
    

    public MudTheme Theme = new()
    {
        PaletteLight = new PaletteLight()
        {
            Primary = Colors.Shades.Black,
            Secondary = Colors.Gray.Darken4,
            AppbarBackground = Colors.Shades.White,
            TextPrimary = "#303030",
            TextSecondary = Colors.Gray.Darken3,
            AppbarText = "#121212",
            DrawerText = Colors.Gray.Darken4,
            LinesDefault = Colors.Gray.Darken3,
            
            
        },
        PaletteDark = new PaletteDark()
        {
            Primary = Colors.Blue.Lighten1
        },

        LayoutProperties = new LayoutProperties()
        {
            DrawerWidthLeft = "200px",
            DrawerWidthRight = "200px"
        },
        Typography = new Typography()
        {
            Default = new DefaultTypography()
            {
                FontFamily = new[] { "Poppins" }
            }
        }
        
    };
}

@code {
    private string? _currentUrl;

    protected override void OnInitialized()
    {
        _currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

}